~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
		Tema Proiect: ETAPA1 - 3 CHESS - Mutarea unui pion

				  Echipa 
		_________________________________________
		|      NUME	|    PRENUME     |GRUPA	|
		`````````````````````````````````````````
		|   Bordincel   |  Andra-Maria	 |325CC	|
		`````````````````````````````````````````
		|     Judea	|Alexandru-Daniel|325CC	|
		`````````````````````````````````````````
		|     Matei 	| Stefan-Madalin |325CC	|
		`````````````````````````````````````````
		|    Stanciu    |   Ioan-Razvan  |325CC	|
		`````````````````````````````````````````
An de studiu: 2020-2021
~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
			Instructiuni de compilare:

-	Este necesar ca pe masina virtuala sa aveti instalat XBoard.
In cazul in care acesta nu este instalat, introduceti in terminal comanda:
	"sudo apt-get install xboard".
-	Pentru generarea engine-ului, introduceti in terminal comanda: "make".
-	Pentru pornirea jocului cu engine-ul, introduceti comanda: "make run".
-	Pentru pornirea jocului in interfata de xboard, fara modul de debug,
introduceti comanda: "make noDebug".
-	Pentru pornirea jocului in interfata de xboard, cu modul de debug,
introduceti comanda: "make debug".
-	Pentru stergerea executabilului si a fisierului de debug create anterior,
introduceti comanda: "make clean".
```````````````````````````````````````````````````````````````````````````````
			 Impartirea sarcinilor acestei etape:

Realizarea acestei etape a fost un efort comun, in care toti membrii echipei au
participat activ la ducerea la bun sfarsit a proiectului curent.

- 	Comunicarea cu XBoard-ul si primirea raspunsurilor de la acesta au fost
implementate de Andra-Maria Bordincel;
-	Versionarea continua pe GitHub a proiectului nostru a fost realizata de Ioan
Razvan Stanciu intr-un repository privat, separat de cel oficial pentru proiect;
- 	Reprezentarea pieselor si a tablei de joc interne au fost implementate de
Alexandru-Daniel Judea si Stefan-Madalin Matei;
-	Transpunerea mutarilor trimise de catre XBoard in tabla noastra interna de
joc a fost realizata de Alexandru-Daniel Judea si Ioan-Razvan Stanciu;
-	Algoritmul de generare a urmatoarei mutari si implementarea sa au fost
realizate de Andra-Maria Bordincel si Stefan-Madalin Matei;
-	Modularizarea codului a fost realizata de Stefan-Madalin Matei;
-	Fisierul Makefile a fost realizat de Andra-Maria Bordincel;
```````````````````````````````````````````````````````````````````````````````
		Implementarea structurii tablei de sah si a pionilor:

In fisierul "PIESE.h" se regasesc clasele definite de noi pentru reprezentarea
pionilor. Superclasa Piece are ca si atribute generale ale unei piese numele si
culoarea acesteia si metodele de get_name() si get_color().
Aceasta este mostentita de subclasele Pawn, King, Queen, Bishop, Rook si Knight
fiecare avand cate un constructor instantiaza numele si culoarea piesei, precum
si metode de get_name() si get_color().
Clasa Piece mai este mostenita si de subclasa Empty, pe care o utilizam pentru
reprezentarea patratelor goale in tabla noastra interna de joc.
In fisierul "GAME.h" se regaseste structura square pe care o folosim in
construirea unei table Board[9][9], valoarea sa fiind o piesa din cele definite
mai sus. De asemenea, tot aici avem implementata si clasa Game in care este
decarata tabla de joc si metoda update() care instantiaza si ordoneaza piesele
acoperind indicii de la 1 la 8.
```````````````````````````````````````````````````````````````````````````````
			Comunicarea cu XBoard-ul:

Pana acum, engine-ul nostru poate interpreta si interactiona cu urmatoarele
comenzi transmise de XBoard:
-	xboard 	   -> programul se conecteaza la XBoard
-	protover 2 -> unde transmitem feature-urile engine-ului nostru:
			* done=0 (pentru a reduce timpul de initializare
			   	  al engine-ului);
			* myname=Ocult_Records (pentru a seta numele
						engine-ului nostru); 
			* sigint=0 (pentru a dezactiva semnalele de intrerupere);
			* san=0 (pentru a seta formatul in tipul charNRcharNR);
			* done=1 (pentru a incheia timpul de asteptare pentru
				  urmatorul feature);
-	new	  -> programul apeleaza functia update() pentru a initializa
		     tabla de sah interna si seteaza culoarea engine-ului ca
		     fiind negru initial;
-	force	  -> culoarea engine-ului este setata ca "Neither" pentru ca
		     acesta sa nu fie nevoit sa faca o mutare pentru alb sau
		     negru pana la primirea comenzii go;
-	go 	  -> tinand cont de culoarea actuala a engine-ului, acesta
		     apeleaza functia de generare mutare pentru culoarea
		     care este la rand;
-	white 	  -> seteaza culoarea engine-ului ca "White";
-	black	  -> seteaza culoarea engine-ului ca "Black";
-	quit	  -> se iese din bucla de preluare a comenzilor si se va
		     inchide automat tabla de joc din XBoard.
- 	in cazul in care este primita o mutare de tip charNRcharNR se verifica
	daca aceasta este valida si se apeleaza functia pentru generarea
	urmatoarei mutari. Daca mutarea generata este "resign\n", engine-ul
	se declara infrant si jocul se opreste afisand scorul, iar daca nu,
	se va continua jocul. 

Comenzile primite de la XBoard sunt citite in sirul command, iar in functie de
valoarea pe care o ia acesta se va continua procesul de derulare al jocului.

Implementarea acestui proces de primire/trimitere comenzi se regaseste in
fisierul "FCT.cpp", mai exact in functia void initial(), apelata in main-ul din
fisierul "ENGINE.cpp", unde se initializeaza si matricea de joc pentru prima data.
```````````````````````````````````````````````````````````````````````````````
			Implementare algoritm de mutare:

Corpurile functiilor necesare pentru generarea unei mutari sunt declarate in
fisierul "FCT.cpp", imediat dupa functia void initial();

Functia "string move(string mutare, bool flag)" primeste ca si parametrii o
mutare primita ca input si un flag de tip boolean. Daca flag-ul este setat pe
true inseamna ca engine-ul trebuie sa returneze o mutare valida ca raspuns pentru
mutarea primita. Daca flag-ul este setat pe false, inseamna ca engine-ul nu a
primit o mutare anterioara a user-ului ca si parametru si trebuie sa realizeze
singur urmatoarea mutare (caz ce se apeleaza la comanda go) in functie de 
culoarea engine-ului in acel moment.
In primul corp if ... else se verifica ca falg-ul sa fie setat pe true si
culoarea de joc a engine-ului. Pentru ambele ramuri se va face conversia
mutarii primite ca parametru in indecsii specifici (de la 1 la 8) pentru tabla
interna de joc, se muta piesa in tabla interna pe pozitia descrisa de x_final
si y_final si se elibereaza locul de unde a plecat, adica de pe pozitia x_start,
y_start in matricea joclui, urmand sa fie generat string-ul caracteristic mutarii
pe care trebuie sa o realizeze engine-ul ca si raspuns.

Functia "string generate_pawn_moves(string color)" primeste ca si parametru
culoarea opusa a engine-ului. In functie de aceasta, se va incepe parcurgerea
pe coloane a matricei de joc pana gasirea primmului pion disponibil de culoarea
engine-ului. Se calculeaza pozitia finala pe care acesta trebuie sa ajunga prin
intermediul functiei "pawn_valid_move(..)" ce primeste ca parametrii pozitia
curenta a pionului si culoarea sa, dupa care, daca a fost generata o mutare
buna, acesta este mutat pe tabla de joc, pozitia initaila devenind goala. In
cazul in care ajunge in capatul opus culorii sale cu brio, acesta avanseaza
la rangul de Regina. Dupa aceasta mutare interna, se construieste sirul pe
care il va trimite engine-ul nostru catre XBoard, adaugand intr-un sir indecsii
corespunzatori pozitiilor din tabla transformati in mutare de tip charNRcharNR.
In cazul in care un pion nu poate efectua o mutare valida, se intoarce ca si
comanda pentru xboard "resign\".

Functia "point pawn_valid_move(int i, int j, string color)" primeste ca si
parametrii coordonatele initiale din tabla, i si j, si culoarea piesei ce
trebuie mutata. Se initializeaza pentru inceput o solutie invalida ce nu va
permite mutarea pe tabla, apoi, in functie de culoare, se verifica posibilitatea
pionului curent de a captura in stanga, in dreapta sau de a inainta. Daca va fi
indeplinit vreunul din aceste 3 cazuri de miscare, se va returna automat pozitia
la care se va duce pionul, modificand parametrii solutiei in indicii respectivi.
In cazul miscarii inainte, se va mai verifica si daca pionul se afla pe prima
linie de pioni a culorii sale de unde va continua sa verifice daca este posibil
sa mute un patrat sau doua in fata. Pentru atacul pe diagonale se va verifica
daca intr-adevar se afla o piesa de culoare opusa acolo ce poate fi capturata.

Functia "bool isOntable(int x, int y)" primeste ca si parametrii doua coordonate,
x si y, si verifica daca acestea se incadreaza pe tabla de joc intre indecsii 
1 si 8 specifici tablei noastre.

CAZURI IN CARE SE POATE LUA RESIGN SAU ILLEGAL MOVE:
In cazul in care engine-ul genereaza o mutare de pion care va conduce la 
aducerea Regelui in sah, se va primi ca raspuns "Illegal move" deoarece acesta
nu stie inca cum sa interpreteze aceasta posibilitate.
In cazul in care pe o coloana se afla 2 pioni de culoarea engine-ului, acesta
va verifica posibilitatea de inaintare a pionului cel mai putin avansat. Daca
patratul din fata lui este ocupat de o piesa de aceeasi culoare, se va declara
resign. La fel, daca nu mai poate efectua mutari in fata sau ataca pe diagonala
si nu a ajuns la statut de regina, se va declara resign si nu se va mai trece la
verificarea urmatoarei linii.
```````````````````````````````````````````````````````````````````````````````
				Surse de inspiratie:

https://www.gnu.org/software/xboard/engine-intf.html
https://www.gnu.org/software/chess/
```````````````````````````````````````````````````````````````````````````````
~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*
		Tema Proiect: ETAPA2 - 3 CHESS - Mutarea celorlalte piese
~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*
			 Impartirea sarcinilor acestei etape:

-	Algoritmul de generare a urmatoarei mutari si implementarea pentru tura si
nebun au fost realizate de Alexandru-Daniel Judea si Ioan-Razvan Stanciu;
-	Algoritmul de generare a urmatoarei mutari si implementarea pentru piesele
ramase au fost implementate de Stefan-Madalin Matei si Andra-Maria Bordincel;
-	Debug-ul codului a fost realizat de Stefan-Madalin Matei si Andra-Maria Bordincel; 
```````````````````````````````````````````````````````````````````````````````
					Implementare algoritm de mutare:

	Pornind de la algoritmul implementat pentru mutarea pionilor am realizat si
restul cazurilor pentru generarea mutarilor pieselor ramase.

Functia "string move(string mutare, bool flag)" se comporta in mod similar, doar
ca de data aceasta verifica pe rand posibilitatea mutarii oricarei piese inaintea
mutarii unui pion. Pentru ca acest lucru sa fie realizat, se va verifica daca
mutarea pe care dorim sa o executam va duce la resign. In caz afirmativ se trece
la urmatoarea verificare, iar in caz negativ se apeleaza functia ce genereaza
mutarea pentru piesa in cauza.

Functia "string generate_rook_moves(string color)" primeste ca si parametru
culoarea opusa a engine-ului. In functie de aceasta, se va incepe parcurgerea
pe coloane a matricei de joc pana gasirea primei ture disponibile de culoarea
engine-ului. Se calculeaza pozitia finala pe care acesta trebuie sa ajunga prin
intermediul functiei "rook_valid_move(..)" ce primeste ca parametrii pozitia
curenta a piesei si culoarea sa, dupa care, daca a fost generata o mutare
buna, acesta este mutat pe tabla de joc, pozitia initaila devenind goala. Dupa
aceasta mutare interna, se construieste sirul pe care il va trimite engine-ul
nostru catre XBoard, adaugand intr-un sir indecsii corespunzatori pozitiilor
din tabla transformati in mutare de tip charNRcharNR.

Functia "point rook_valid_move(int i, int j, string color)" primeste ca si
parametrii coordonatele initiale din tabla, i si j, si culoarea piesei ce
trebuie mutata. Se initializeaza pentru inceput o solutie invalida ce nu va
permite mutarea pe tabla, apoi, in functie de culoare, se verifica posibilitatea
turei curente de a merge in stanga, in dreapta, de a inainta, sau de a merge
inapoi, eventual si capturile posibile. Daca va fi indeplinit vreunul din aceste
cazuri de miscare, se va returna automat pozitia la care se va duce tura,
modificand parametrii solutiei in indicii respectivi.

Functia "string generate_bishop_moves(string color)" primeste ca si parametru
culoarea opusa a engine-ului. In functie de aceasta, se va incepe parcurgerea
pe coloane a matricei de joc pana gasirea primmului nebun disponibil de culoarea
engine-ului. Se calculeaza pozitia finala pe care acesta trebuie sa ajunga prin
intermediul functiei "bishop_valid_move(..)" ce primeste ca parametrii pozitia
curenta a piesei si culoarea sa, dupa care, daca a fost generata o mutare
buna, acesta este mutat pe tabla de joc, pozitia initaila devenind goala. Dupa
aceasta mutare interna, se construieste sirul pe care il va trimite engine-ul
nostru catre XBoard, adaugand intr-un sir indecsii corespunzatori pozitiilor
din tabla transformati in mutare de tip charNRcharNR.

Functia "point bishop_valid_move(int i, int j, string color)" primeste ca si
parametrii coordonatele initiale din tabla, i si j, si culoarea piesei ce
trebuie mutata. Se initializeaza pentru inceput o solutie invalida ce nu va
permite mutarea pe tabla, apoi, in functie de culoare, se verifica posibilitatea
nebunului curent de a merge in diagonala in stanga, in dreapta, in directia inainte
sau inapoi, eventual si capturile posibile. Daca va fi indeplinit vreunul din
aceste cazuri de miscare, se va returna automat pozitia la care se va duce nebunul,
modificand parametrii solutiei in indicii respectivi.

Functia "string generate_knight_moves(string color)" primeste ca si parametru
culoarea opusa a engine-ului. In functie de aceasta, se va incepe parcurgerea
pe coloane a matricei de joc pana gasirea primmului cal disponibil de culoarea
engine-ului. Se calculeaza pozitia finala pe care acesta trebuie sa ajunga prin
intermediul functiei "knight_valid_move(..)" ce primeste ca parametrii pozitia
curenta a piesei si culoarea sa, dupa care, daca a fost generata o mutare
buna, acesta este mutat pe tabla de joc, pozitia initaila devenind goala. Dupa
aceasta mutare interna, se construieste sirul pe care il va trimite engine-ul
nostru catre XBoard, adaugand intr-un sir indecsii corespunzatori pozitiilor
din tabla transformati in mutare de tip charNRcharNR.

Functia "point knight_valid_move(int i, int j, string color)" primeste ca si
parametrii coordonatele initiale din tabla, i si j, si culoarea piesei ce
trebuie mutata. Se initializeaza pentru inceput o solutie invalida ce nu va
permite mutarea pe tabla, apoi, in functie de culoare, se verifica posibilitatea
calului curent de a merge in L stanga, in dreapta, inainte sau inapoi, eventual
si capturile posibile. Daca va fi indeplinit vreunul din aceste cazuri de miscare,
se va returna automat pozitia la care se va duce calul, modificand parametrii
solutiei in indicii respectivi.

Functia "string generate_queen_moves(string color)" primeste ca si parametru
culoarea opusa a engine-ului. In functie de aceasta, se va incepe parcurgerea
pe coloane a matricei de joc pana gasirea reginei disponibile de culoarea
engine-ului. Se calculeaza pozitia finala pe care aceasta trebuie sa ajunga prin
intermediul functiei "queen_valid_move(..)" ce primeste ca parametrii pozitia
curenta a piesei si culoarea sa, dupa care, daca a fost generata o mutare
buna, acesta este mutat pe tabla de joc, pozitia initaila devenind goala. Dupa
aceasta mutare interna, se construieste sirul pe care il va trimite engine-ul
nostru catre XBoard, adaugand intr-un sir indecsii corespunzatori pozitiilor
din tabla transformati in mutare de tip charNRcharNR.

Functia "point queen_valid_move(int i, int j, string color)" primeste ca si
parametrii coordonatele initiale din tabla, i si j, si culoarea piesei ce
trebuie mutata. Se initializeaza pentru inceput o solutie invalida ce nu va
permite mutarea pe tabla, apoi, in functie de culoare, se verifica posibilitatea
reginei curente de a merge in orice directie, eventual si capturile posibile.
Daca va fi indeplinit vreunul din aceste cazuri de miscare, se va returna automat
pozitia la care se va duce regina, modificand parametrii solutiei in indicii respectivi.

Functia "string generate_king_moves(string color)" primeste ca si parametru
culoarea opusa a engine-ului. In functie de aceasta, se va incepe parcurgerea
pe coloane a matricei de joc pana gasirea primului rege disponibil de culoarea
engine-ului. Se calculeaza pozitia finala pe care acesta trebuie sa ajunga prin
intermediul functiei "king_valid_move(..)" ce primeste ca parametrii pozitia
curenta a piesei si culoarea sa, dupa care, daca a fost generata o mutare
buna, acesta este mutat pe tabla de joc, pozitia initaila devenind goala. Dupa
aceasta mutare interna, se construieste sirul pe care il va trimite engine-ul
nostru catre XBoard, adaugand intr-un sir indecsii corespunzatori pozitiilor
din tabla transformati in mutare de tip charNRcharNR.

Functia "point king_valid_move(int i, int j, string color)" primeste ca si
parametrii coordonatele initiale din tabla, i si j, si culoarea piesei ce
trebuie mutata. Se initializeaza pentru inceput o solutie invalida ce nu va
permite mutarea pe tabla, apoi, in functie de culoare, se verifica posibilitatea
regelui curent de a merge cate o unitate in orice directie, eventual si capturile
posibile. Daca va fi indeplinit vreunul din aceste cazuri de miscare, se va
returna automat pozitia la care se va duce tura, modificand parametrii solutiei
in indicii respectivi.

PROBLEME:
Nu am reusit sa implementam cazurile de verificare pentru sah, rocada sau miscarea
"en passant". De asemenea, nu am reusit sa identificam bug-ul din cauza caruia
vom lua resign imediat ce mutam o piesa.